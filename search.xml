<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[mongoDB 的全量备份 思路 & 脚本]]></title>
      <url>http://yoursite.com/2016/11/25/mongodbackup/</url>
      <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天心情好就写点东西，毕业也将近一年了，感觉生活 &amp; 工作各个方面都还行，就是运动缺乏运动，所谓生命在于运动还是道理，不说废话了。我们直接进入主题吧。最进做了项目，用到了mongodDB数据库，关于mongoDB数据库，本文就不再介绍了，这里主要说一下mongoDB在阿里云上的全量备份方法。我们都是linux系统的菜鸟，对linux几乎一无所知的同学可以看一下，因为我在做备份之前，也是一脸蒙逼。下面我们来看一下吧。</p>
<h2 id="备份思路"><a href="#备份思路" class="headerlink" title="备份思路"></a>备份思路</h2><ol>
<li>这次我们做的是全量备份，与<code>mongoDB</code>增量备份是不同的。相对来说，增量备份实现有些困难，之后有时间做增量备份吧! 全量备份顾名思义，就是全部备份，缺点就是每次备份都是将整个数据库都备份了。这样就很浪费内存，要知道线上机器的内存都是花钱买来的，但是为了数据安全，也就先这么着吧！</li>
<li>用过<code>mongoDB</code>都知道，在安装<code>mongoDB</code>数据库的时候，我们在对应的<code>*./bin</code>文件下面可以看到好多的<code>.exe</code>文件，这些工具就是 <code>mongoDB</code> 提供给用户管理数据库用的。今天我们主要用到了 <code>mongodump.exe</code> 这个工具，此工具就是用来备份数据库的，好处就是该工具在运行时，数据库依然可以正常写入和读取，有些时候我们备份数据库的时候，通常都是先锁定数据库防止写入，然后备份，备份好之后，再解锁。但是用了 <code>mongoDB</code> 自带的 <code>mongodump.exe</code> 我们可以放心的备份而不需要锁定数据库。</li>
<li>由于线上的机器肯定装了<code>mongoDB</code>数据库，所以我们今天的备份思路就是，在线上加定时任务，去执行一个 <code>shell</code> 脚本，然后再 <code>shell</code> 脚本中调用 <code>mongoDB</code> 自带的工具<code>mongodump</code> 备份数据库就好了，然后，我的设置是每天凌晨备份，保留最近 <code>7天</code> 的数据，<code>7天</code> 之前全部删掉，没必要保留。</li>
</ol>
<a id="more"></a>
<h2 id="开始备份"><a href="#开始备份" class="headerlink" title="开始备份"></a>开始备份</h2><ol>
<li><p>首先要知道，所有的<code>shell</code>脚本开头都应该这么写：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div></pre></td></tr></table></figure>
</li>
<li><p>头写好之后，下面我们需要指定几个变量：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">nameserver=<span class="string">"127.0.0.1"</span></div><div class="line">user=<span class="string">'test'</span></div><div class="line">password=<span class="string">'123456789'</span></div><div class="line">commandpath=<span class="string">'/usr/bin'</span></div><div class="line">targetpath=<span class="string">'/tmp/backup'</span></div><div class="line">logpath=<span class="string">'/usr'</span></div><div class="line">nowtime=$(date <span class="string">"+%Y%m%d%H:%M:%S"</span> | cut <span class="_">-d</span> <span class="string">":"</span> <span class="_">-f</span> 1)</div><div class="line">dbname=<span class="string">'cms'</span></div><div class="line">logtime=$(date <span class="string">"+%Y%m%d%H:%M:%S"</span>)</div><div class="line">removetime=$(date <span class="_">-d</span> <span class="string">"-7 day"</span> +<span class="string">"%Y%m%d%H"</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p><code>nameserver</code> ————是服务器的 <code>ip</code>;<br><code>user</code> ————是数据库管理员的用户名;<br><code>password</code> ————自然就是密码了;<br><code>targetpath</code> ————数据库备份路径;<br><code>logpath</code> ————备份日志存储路径;<br><code>nowtime</code> ————当前时间，格式化输出，用作后面备份的数据库文件名称，方便删除和查看;<br><code>dbname</code> ————要备份的数据库的名称;<br><code>logtime</code> ————备份日志写入时间;<br><code>removetime</code> ————用户删除 <code>7天之前</code> 文件标识;</p>
</blockquote>
<p>这里需要注意一点，如果你给 <code>mongoDB</code> 数据库添加了管理员 ，那么我们在后面备份的时候必须指定 上面的 <code>user</code> 和 <code>password</code>, 不然会报错，备份会不成功的。然而如果你没有设定管理员，那么后面备份的参数里面也不要写 <code>user</code> 和 <code>password</code> 两个参数，否则也会出错，导致备份不成功。 ok ,here we go!</p>
</li>
<li><p>这里我会写两个用于运行的函数，<code>start</code> 函数用于备份数据， <code>remove</code> 函数用于删除旧的备份数据：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">start</span></span>()</div><div class="line">&#123;</div><div class="line">  <span class="built_in">echo</span>  <span class="string">"[<span class="variable">$&#123;logTime&#125;</span>]====backup start===="</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line"><span class="variable">$&#123;commandpath&#125;</span>/mongodump --host <span class="variable">$&#123;nameserver&#125;</span> -u <span class="variable">$&#123;user&#125;</span> -p <span class="variable">$&#123;password&#125;</span> --port 27017 <span class="_">-d</span> <span class="variable">$&#123;dbname&#125;</span> --out <span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;nowtime&#125;</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">remove</span></span>()</div><div class="line">&#123;</div><div class="line">  <span class="built_in">echo</span> <span class="string">"[<span class="variable">$&#123;logtime&#125;</span>]===removeold start==="</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line">  <span class="keyword">if</span> [ <span class="_">-d</span> <span class="string">"<span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;removetime&#125;</span>/"</span> ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    rm -rf <span class="string">"<span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;removetime&#125;</span>/"</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"===success:delete <span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;removetime&#125;</span>/  completed!==="</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"===failure:<span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;removetime&#125;</span>/ does not exists!==="</span>  &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line">  <span class="keyword">fi</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"[<span class="variable">$&#123;logtime&#125;</span>]===clear end ! ==="</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里也有值得注意的东西 就是必须指定备份日志的路径，不然会出现这样的问题，你备份成功了，但是日志没有记录下来，但是你在手动执行的是没有错误的，也备份成功了，日志也写入了。但是通过定时任务去执行 <code>shell</code> 脚本是，日志不能写入，即使你的数据备份成功了。所以这里要注意这一点。我已经踩过坑了。啊哈哈哈….. 而且我强烈建议路径一律用绝对路径，减少出错的机率。至于上面调用的 <code>linux</code> 命令不懂得，自行解决。</p>
</blockquote>
</li>
<li><p>执行备份函数（<code>start</code>） 和 删除函数 （<code>remove</code>）进行备份和删除旧文件；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">execute</span></span>()</div><div class="line">&#123;</div><div class="line">  start</div><div class="line">  <span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span>  <span class="string">"******backup successfully******"</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line">    remove</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"====backup  failure===="</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line">  <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> <span class="string">"<span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;nowtime&#125;</span>/"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">mkdir <span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;nowtime&#125;</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">execute</div><div class="line"><span class="built_in">echo</span> <span class="string">"[<span class="variable">$&#123;logtime&#125;</span>]===******===backup end --&gt; backup to the path: <span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;nowtime&#125;</span> ===******==="</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div></pre></td></tr></table></figure>
<blockquote>
<p>这里需要需要说的也不多，<code>if [ $? -eq 0 ]</code> 这句代码的意思是判断上一个命令执行是否完成。 <code>-eq</code> 是 <code>linux</code> 中的 <code>相等</code>判断符号。 当 <code>start</code> 函数执行完成后，打印<code>******backup successfully******</code>标志，然后去删除旧备份数据的文件夹。 <code>if [ ! -d &quot;${targetpath}/${nowtime}/&quot; ]</code> 中的 <code>-d</code> 用于判断时候存在某一个文件夹。下面的代码应该都看得懂吧！ 不需要多说了。经过实测，该备份方案完全可行，网友根据自己的实际情况做相应更改。ok, 基本到这里也说完了，下面奉上完整源代码。</p>
</blockquote>
</li>
</ol>
<h2 id="完整源代码"><a href="#完整源代码" class="headerlink" title="完整源代码"></a>完整源代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># Description: use Linux Crontab create a task to backup Database for mongoDB</span></div><div class="line"><span class="comment"># Script Author: goooooog</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Variables</span></div><div class="line">nameserver=<span class="string">"127.0.0.1"</span></div><div class="line">user=<span class="string">'test'</span></div><div class="line">password=<span class="string">'123'</span></div><div class="line">commandpath=<span class="string">'/usr/bin'</span></div><div class="line">targetpath=<span class="string">'/tmp/backup'</span></div><div class="line">logpath=<span class="string">'/usr'</span></div><div class="line">nowtime=$(date <span class="string">"+%Y%m%d%H:%M:%S"</span> | cut <span class="_">-d</span> <span class="string">":"</span> <span class="_">-f</span> 1)</div><div class="line">dbname=<span class="string">'cms'</span></div><div class="line">logtime=$(date <span class="string">"+%Y%m%d%H:%M:%S"</span>)</div><div class="line">removetime=$(date <span class="_">-d</span> <span class="string">"-7 day"</span> +<span class="string">"%Y%m%d%H"</span>)</div><div class="line"><span class="function"><span class="title">start</span></span>()</div><div class="line">&#123;</div><div class="line">  <span class="built_in">echo</span>  <span class="string">"[<span class="variable">$&#123;logTime&#125;</span>]====backup start===="</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line"> <span class="variable">$&#123;commandpath&#125;</span>/mongodump --host <span class="variable">$&#123;nameserver&#125;</span> -u <span class="variable">$&#123;user&#125;</span> -p <span class="variable">$&#123;password&#125;</span> --port 27017 <span class="_">-d</span> <span class="variable">$&#123;dbname&#125;</span> --out <span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;nowtime&#125;</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">remove</span></span>()</div><div class="line">&#123;</div><div class="line">  <span class="built_in">echo</span> <span class="string">"[<span class="variable">$&#123;logtime&#125;</span>]===removeold start==="</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line">  <span class="keyword">if</span> [ <span class="_">-d</span> <span class="string">"<span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;removetime&#125;</span>/"</span> ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    rm -rf <span class="string">"<span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;removetime&#125;</span>/"</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"===success:delete <span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;removetime&#125;</span>/  completed!==="</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"===failure:<span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;removetime&#125;</span>/ does not exists!==="</span>  &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line">  <span class="keyword">fi</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"[<span class="variable">$&#123;logtime&#125;</span>]===clear end ! ==="</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">execute</span></span>()</div><div class="line">&#123;</div><div class="line">  start</div><div class="line">  <span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span>  <span class="string">"******backup successfully******"</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line">    remove</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"====backup  failure===="</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div><div class="line">  <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> <span class="string">"<span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;nowtime&#125;</span>/"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line"> mkdir <span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;nowtime&#125;</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">execute</div><div class="line"><span class="built_in">echo</span> <span class="string">"[<span class="variable">$&#123;logtime&#125;</span>]===******===backup end --&gt; backup to the path: <span class="variable">$&#123;targetpath&#125;</span>/<span class="variable">$&#123;nowtime&#125;</span> ===******==="</span> &gt;&gt; <span class="variable">$&#123;logpath&#125;</span>/mongodb-backup.log</div></pre></td></tr></table></figure>
<h2 id="定时任务设置"><a href="#定时任务设置" class="headerlink" title="定时任务设置"></a>定时任务设置</h2><p>首先你应该先登录到线上的机器，再进行一下的工作。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ..</div><div class="line"><span class="built_in">cd</span> etc</div><div class="line">crontab <span class="_">-e</span>      <span class="comment">#开始编辑定时任务</span></div><div class="line"></div><div class="line">30 0 * * * 你的shell脚本放置的路径/backup.sh     <span class="comment">#注意绝对路径， 表示每天晚上12:30开始备份数据</span></div><div class="line">crontab <span class="_">-l</span>      <span class="comment">#查看所有的定时任务，确保你的定时任务已经加入</span></div></pre></td></tr></table></figure>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>好吧，结束了，一个前端狗，用 <code>linux</code> 写的 <code>shell</code> 脚本备份 <code>mongoDB</code> 数据库的初体验就算完成了，有机会做增量备份。 欢迎指导。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react & dva 全新的WEB应用数据解决方案(二)]]></title>
      <url>http://yoursite.com/2016/10/19/react-dva2/</url>
      <content type="html"><![CDATA[<h2 id="文章前言"><a href="#文章前言" class="headerlink" title="文章前言"></a>文章前言</h2><p>上一篇文章中，已经说了很多，这篇文章中，我们将主要针对实际的业务场景，去理解和做一些有意义事。主要的目的就是利用这种新的开发模式，在以后的实际开发中，少踩坑。OK，Here we go…….</p>
<h2 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h2><p>找到 <code>/services/</code> 文件夹，新建 users.js 文件， 然后引入 <code>request.js</code> 文件，开始写函数，以后所有的请求都在这里发起，当然只是针对当前业务页面的请求，面对不同类型的业务，我们可以创建不同的 js 脚本文件去处理相应的请求。具体代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'../utils/request'</span>;</div><div class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">params</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> request(<span class="string">`/api/users?<span class="subst">$&#123;qs.stringify(params)&#125;</span>`</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上的代码中我们发起了一个异步的请求，下面我们要为这个请求的URL地址做一些工作了，找到 <code>mock</code> 文件夹，在下面创建一个users.js提供接口用于生产我们的数据，具体代码如下：<br><a id="more"></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'qs'</span>);</div><div class="line"><span class="keyword">const</span> mockjs = <span class="built_in">require</span>(<span class="string">'mockjs'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">  <span class="string">'GET /api/users'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> page = qs.parse(res.query);</div><div class="line"></div><div class="line">    <span class="keyword">const</span> data = mockjs.mock(&#123;</div><div class="line">      <span class="string">'data|100'</span>: [&#123;</div><div class="line">        <span class="string">'id|+1'</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'@cname'</span>,</div><div class="line">        <span class="string">'age|11-99'</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">address</span>: <span class="string">'@region'</span></div><div class="line">      &#125;],</div><div class="line">      <span class="attr">page</span>: &#123;</div><div class="line">        <span class="attr">total</span>: <span class="number">100</span>,</div><div class="line">        <span class="attr">current</span>: <span class="number">1</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      res.json(&#123;</div><div class="line">        <span class="attr">success</span>: <span class="literal">true</span>,</div><div class="line">        data,</div><div class="line">        <span class="attr">page</span>: &#123;</div><div class="line">          <span class="attr">current</span>: <span class="number">1</span>,</div><div class="line">          <span class="attr">total</span>: <span class="number">100</span>,</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;, <span class="number">500</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码中，引入了一个叫做 <code>mockjs</code> 模块去生产数据，大大简化了手动构建数据步骤，也省了很多麻烦！推荐使用。更多详情请前往<a href="http://mockjs.com/" target="_blank" rel="external"><code>mockjs传送门</code></a>; OK，至此接口也有了，数据也有了。少年去玩吧！！！</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在实际项目，也是一边学习react，一边用，很多东西都是在实际项目中。不断踩坑得到的，但是毋庸置疑，react是一种潮流，它值得你去一试。 这次为什么要做这个笔记呢？ 主要是因为之前做项目所有的数据都是自己动手组织的，到后面会发现，随着项目变大，功能越多，数据结构复杂，数据越发的难以维护了。所以想尝试去理解 <code>redux</code> 这种数据管理方法。于是做了这么两篇东西。如果有错误，请多多指教。大家共同进步嘛！ 本次教程是参考<a href="https://github.com/dvajs/dva-docs/tree/master/v1/zh-cn/tutorial" target="_blank" rel="external"><code>这个教程</code></a> 写的。如果还不懂，那就移步前者，他写的更加完美。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react & dva 全新的WEB应用数据解决方案（一）]]></title>
      <url>http://yoursite.com/2016/10/18/react-dva1/</url>
      <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>因为项目涉及到react &amp; dva ,所以首先我们需要安装<code>dva-cli</code>工具去初始化我们的项目，具体的安装方法，网上一大堆，这里不再赘述。有一点需要知道，<code>dva</code>是对<code>redux</code>一种封装，使得我们在处理数据，便于管理，项目结构更加清晰，能够将我们的重点更多的集中业务逻辑的处理上。大大提升开发效率。同时也便于后期数据维护。好了，讲这么多，下面开始实践了；在命令行中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir dva-dome &amp;&amp; <span class="built_in">cd</span> dva-dome</div><div class="line">dva init</div></pre></td></tr></table></figure></p>
<p>至此，我们就得到了一个标准的项目，这个项目的结构为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">·</div><div class="line">|———/mock/                #数据mock的接口文件</div><div class="line">|———/src/                 #项目源码目录</div><div class="line">| |—— /components/        #项目组件</div><div class="line">| |—— /routes/            #路由组件</div><div class="line">| |—— /models/            #数据模型</div><div class="line">| |—— /services/          #数据接口</div><div class="line">| |—— /utils/             #工具函数</div><div class="line">| |—— route.js            #路由配置</div><div class="line">| |—— index.js            #入口文件</div><div class="line">| |—— index.less          #index样式文件</div><div class="line">| |—— index.html</div><div class="line">|——— package.json         #项目信息</div><div class="line">|——— proxy.config.js      #数据mock配置</div></pre></td></tr></table></figure></p>
<p>根据后面的注释，我们可以很清晰看出，该脚手架工具，已经为我们做好了很多事。方便简单。那就开始吧<br><a id="more"></a></p>
<h2 id="使用antd"><a href="#使用antd" class="headerlink" title="使用antd"></a>使用antd</h2><p>通过 npm 安装 <code>antd</code> 和 <code>babel-plugin-import</code> 。babel-plugin-import 是用来自动引入 antd 的脚本和样式的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install antd babel-plugin-import --save</div></pre></td></tr></table></figure>
<p>编辑 webpack.config.js，使 babel-plugin-import 插件生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">webpackConfig.babel.plugins.push([&apos;import&apos;, &#123;</div><div class="line">   libraryName: &apos;antd&apos;,</div><div class="line">   style: &apos;css&apos;,</div><div class="line"> &#125;]);</div></pre></td></tr></table></figure>
<h2 id="设置路由"><a href="#设置路由" class="headerlink" title="设置路由"></a>设置路由</h2><p>项目结构有了，接下来，设置路由，首先在<code>.src/router.js</code>里面设置访问路径，接着在<code>/routes/</code>路径下面创建组件<code>User.jsx</code>。代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  .src/router.js</span></div><div class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Router, Route &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</div><div class="line"><span class="keyword">import</span> Users <span class="keyword">from</span> <span class="string">'./routes/User'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">&#123;history&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;Router history=&#123;history&#125;&gt;</div><div class="line">      &lt;Route path="/users" component=&#123;Users&#125;/&gt;</div><div class="line">    &lt;Router&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  /routes/User.js</span></div><div class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div&gt;User Router Comonent&lt;/div&gt;</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">User.PropTypes=&#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> User;</div></pre></td></tr></table></figure>
<p>如此我们便创建了一个路由，其他业务页面路由也是如此创建。<br>看上去是如此的简单， 那么下面我不得不做工作使得我们组件更加的健壮，OK，GO！继续修改<code>/routes/User.js</code> 文件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 业务组件，后面完善，这里占位。</span></div><div class="line"><span class="keyword">import</span> UserList <span class="keyword">from</span> <span class="string">'../components/Users/UserList'</span>;</div><div class="line"><span class="keyword">import</span> UserSearch <span class="keyword">from</span> <span class="string">'../components/Users/UserSearch'</span>;</div><div class="line"><span class="keyword">import</span> UserModal <span class="keyword">from</span> <span class="string">'../components/Users/UserModal'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./User.less'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> userSearchProps = &#123;&#125;;</div><div class="line">  <span class="keyword">const</span> userListProps = &#123;&#125;;</div><div class="line">  <span class="keyword">const</span> userModalProps = &#123;&#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div className=&#123;styles.base&#125;&gt;</div><div class="line">      &#123;/**用户筛选 */&#125;</div><div class="line">      &lt;UserSearch &#123;...userSearchProps&#125; /&gt;</div><div class="line">      &#123;/**用户信息列表 */&#125;</div><div class="line">      &lt;UserList &#123;...userListProps&#125; /&gt;</div><div class="line">      &#123;/**用户弹出层 */&#125;</div><div class="line">      &lt;UserModal &#123;...userModalProps&#125; /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">User.PropTypes=&#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default User;</div></pre></td></tr></table></figure>
<p>你会发现，该文件出现了 <code>UserList</code>, <code>UserSearch</code>, <code>UserModal</code> import进来的组件，没错它们就是我们需要的，对照代码中的路径，在对应目录下新建对应的文件，并添加<code>UI</code> 代码。如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  /components/Users/UserList.js</span></div><div class="line"><span class="keyword">import</span> React, &#123; PropType &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;&lt;div&gt; 用户列表 &lt;/div&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  /components/Users/UserSearch.js</span></div><div class="line"><span class="keyword">import</span> React, &#123; PropType &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt; &lt;div&gt; 用户筛选 &lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  /components/Users/UserModal.js</span></div><div class="line"><span class="keyword">import</span> React, &#123; PropType &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt; &lt;div&gt; 用户弹出层 &lt;/div&gt;</div></pre></td></tr></table></figure>
<p>OK! 到此为止，我可以检验一下成果了，启动服务器查看。命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure></p>
<p>在浏览中输入<code>localhost:8989/#/User</code>查看。<br>很开心，我们已经看到了自己做得成果，很好，继续接着往下走，下面我们将把 <code>UserList</code>, <code>UserSearch</code>, <code>UserModal</code> 做成我们想要的样子。 对，看上去就是一脸想要的样子！嘿嘿。。。</p>
<h2 id="UserList组件"><a href="#UserList组件" class="headerlink" title="UserList组件"></a>UserList组件</h2><p>有了 <code>UI</code>, 没数据怎么行吗？下面我们会将数据引进到组件里面，做成真正你想<em>要</em> 的样子。来修改<code>src/comments/Users/UserList.js</code>,具体代码如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">import React, &#123; PropType &#125; from 'react';</div><div class="line">import &#123; Table, message, Popconfirm &#125; from 'antd';</div><div class="line"></div><div class="line">const UserList = (&#123;</div><div class="line">  total,</div><div class="line">  current,</div><div class="line">  loading,</div><div class="line">  dataSource,</div><div class="line">&#125;) =&gt; &#123;</div><div class="line">  const columns = [&#123;</div><div class="line">    title: "姓名",</div><div class="line">    dataIndex: "name",</div><div class="line">    key: "name",</div><div class="line">    render: (text) =&gt; &lt;a href='javaScript:;'&gt;&#123;text&#125;&lt;/a&gt;</div><div class="line">  &#125;, &#123;</div><div class="line">    title: '年龄',</div><div class="line">    dataIndex: 'age',</div><div class="line">    key: 'age',</div><div class="line">  &#125;, &#123;</div><div class="line">    title: '住址',</div><div class="line">    dataIndex: 'address',</div><div class="line">    key: 'address',</div><div class="line">  &#125;, &#123;</div><div class="line">    title: '操作',</div><div class="line">    key: 'operation',</div><div class="line">    render: (text, record) =&gt; &#123;</div><div class="line">      &lt;p&gt;</div><div class="line">        &lt;a href="javaScript:;" onClick=&#123;()=&gt;&#123;&#125;&#125;&gt;编辑&lt;/a&gt;</div><div class="line">        &amp;nbsp;</div><div class="line">        &lt;Popconfirm title='确定要删除吗？'&gt;</div><div class="line">          &lt;a href="javaScript:;"&gt;删除&lt;/a&gt;</div><div class="line">        &lt;/Popconfirm&gt;</div><div class="line">      &lt;/p&gt;</div><div class="line">    &#125;</div><div class="line">  &#125;]</div><div class="line"></div><div class="line">  const pagination = &#123;</div><div class="line">    total,</div><div class="line">    current,</div><div class="line">    pageSize: 10,</div><div class="line">    onChange: ()=&gt;&#123;&#125;,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return (</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;Table</div><div class="line">        columns=&#123;columns&#125;</div><div class="line">        dataSource=&#123;dataSource&#125;</div><div class="line">        loading=&#123;loading&#125;</div><div class="line">        rowKey=&#123;record =&gt; record.id&#125;</div><div class="line">        pagination=&#123;pagination&#125;</div><div class="line">      /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  )</div><div class="line">&#125;</div><div class="line">export default UserList;</div></pre></td></tr></table></figure>
<p>这里我们借用国内支付宝团队做的一个优秀的 <code>UI</code> 样式库，其实在实际的项目中，我已经有用过该样式库，很方便，很优秀。虽然还没正式发布，但是值得一用。吐血推荐。好吧，这里免费打了一波广告。既然引用antd,所以我们需要在 <code>src/index.js</code> 中添加 <code>import &#39;antd/dist/antd.css&#39;</code> 引入antd样式库;</p>
<h2 id="模拟数据添加到-UserList-组件"><a href="#模拟数据添加到-UserList-组件" class="headerlink" title="模拟数据添加到 UserList 组件"></a>模拟数据添加到 <code>UserList</code> 组件</h2><p>开始编辑 <code>/routes/User.js</code> 文件，跟着流程走，就会发现通过路由拿到数据，然后再传到页面的 <code>UI</code> 元素中。 代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 业务组件，后面完善，这里占位。</span></div><div class="line"><span class="keyword">import</span> UserList <span class="keyword">from</span> <span class="string">'../components/Users/UserList'</span>;</div><div class="line"><span class="keyword">import</span> UserSearch <span class="keyword">from</span> <span class="string">'../components/Users/UserSearch'</span>;</div><div class="line"><span class="keyword">import</span> UserModal <span class="keyword">from</span> <span class="string">'../components/Users/UserModal'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./User.less'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> userSearchProps = &#123;&#125;;</div><div class="line">  <span class="keyword">const</span> userListProps = &#123;</div><div class="line">    <span class="attr">total</span>: <span class="number">3</span>,</div><div class="line">    <span class="attr">current</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">loading</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">dataSource</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">"木见过"</span>,</div><div class="line">        <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">        <span class="attr">address</span>: <span class="string">"滨江"</span></div><div class="line">      &#125;, &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">"懂得"</span>,</div><div class="line">        <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">        <span class="attr">address</span>: <span class="string">"滨江"</span></div><div class="line">      &#125;, &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">"生活"</span>,</div><div class="line">        <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">        <span class="attr">address</span>: <span class="string">"花园"</span></div><div class="line">      &#125;, &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">"琪琪"</span>,</div><div class="line">        <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">        <span class="attr">address</span>: <span class="string">"北京"</span></div><div class="line">      &#125;, </div><div class="line">    ]</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">const</span> userModalProps = &#123;&#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div className=&#123;styles.base&#125;&gt;</div><div class="line">      &#123;/**用户筛选 */&#125;</div><div class="line">      &lt;UserSearch &#123;...userSearchProps&#125; /&gt;</div><div class="line">      &#123;/**用户信息列表 */&#125;</div><div class="line">      &lt;UserList &#123;...userListProps&#125; /&gt;</div><div class="line">      &#123;/**用户弹出层 */&#125;</div><div class="line">      &lt;UserModal &#123;...userModalProps&#125; /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  )</div><div class="line">&#125;</div><div class="line">User.PropTypes=&#123;</div><div class="line">  user: PropTypes.object,</div><div class="line">&#125;;</div><div class="line">export default User;</div></pre></td></tr></table></figure>
<p>做完之后就可在页面中查看了，是不是有点意思。好了，继续往下走。谁让我们目标那么的远大呢！这让我想起一句话， 人生不止有狗粮，还有到不了的远方和读不懂的诗，但不管怎么样，一路向西，死也要死在路上。哈哈哈。。。从上面的代码可以看出，我们用的是假数据模拟。接下来玩点高端的，我们将把所有数据在 <code>models</code> 中抽象出来，这样非常便于日后的数据维护。</p>
<h2 id="添加Reducers"><a href="#添加Reducers" class="headerlink" title="添加Reducers"></a>添加Reducers</h2><p>这是一个全新的概念，这次接这个做笔记的机会理解一下。dva 中 Reducer 的概念，主要是源于下层封装的 redux, 在 dva 中 reducers 主要负责修改model的数据（state）,<br>看资料得知为什么会叫<code>reducer</code>这个名字，在很多程序中，一个数组都具备reduce这个方法，该方法的功能就是<em>聚合</em>用，例如以下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">y</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">z</span>:<span class="number">3</span>&#125;].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> object.assign(prev, next);</div><div class="line">&#125;)</div><div class="line"><span class="comment">// return &#123;x:1, y:2, z:3&#125;</span></div></pre></td></tr></table></figure></p>
<p>OK, 从上面的代码中我们可以看出，程序将三个对象合成一个对象了。这就是<code>reducer</code>想要达到目的。 如果你了解更多，可以参看<a href="http://redux.js.org/docs/basics/Reducers.html" target="_blank" rel="external">‘Redux Reducers’</a></p>
<h2 id="动手开始给User-Model-添加-Reducers"><a href="#动手开始给User-Model-添加-Reducers" class="headerlink" title="动手开始给User Model 添加 Reducers"></a>动手开始给User Model 添加 Reducers</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">namespace</span>: <span class="string">'user'</span>,</div><div class="line">  <span class="attr">state</span>: &#123;</div><div class="line">    <span class="attr">list</span>: [],</div><div class="line">    <span class="attr">tatal</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">loading</span>: <span class="literal">false</span>,            </div><div class="line">    <span class="attr">current</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">currentItem</span>: &#123;&#125;,</div><div class="line">    <span class="attr">modalVisible</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">modalType</span>: <span class="string">'create'</span>,</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">effects</span>: &#123;</div><div class="line">    *query()&#123;&#125;,</div><div class="line">    *create()&#123;&#125;,</div><div class="line">    *<span class="string">'delete'</span>()&#123;&#125;,</div><div class="line">    *update()&#123;&#125;,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">reducers</span>: &#123;</div><div class="line">    showLoading()&#123;&#125;,</div><div class="line">    showModal()&#123;&#125;,</div><div class="line">    hideModal()&#123;&#125;,</div><div class="line">    querySuccess(state)&#123;</div><div class="line">      <span class="keyword">const</span> mock = &#123;</div><div class="line">        <span class="attr">total</span>: <span class="number">3</span>,</div><div class="line">        <span class="attr">current</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">loading</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">dataSource</span>: [</div><div class="line">          &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"木见过"</span>,</div><div class="line">            <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">            <span class="attr">address</span>: <span class="string">"滨江"</span></div><div class="line">          &#125;, &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"懂得"</span>,</div><div class="line">            <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">            <span class="attr">address</span>: <span class="string">"滨江"</span></div><div class="line">          &#125;, &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"生活"</span>,</div><div class="line">            <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">            <span class="attr">address</span>: <span class="string">"花园"</span></div><div class="line">          &#125;, &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"琪琪"</span>,</div><div class="line">            <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">            <span class="attr">address</span>: <span class="string">"北京"</span></div><div class="line">          &#125;, </div><div class="line">        ],</div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">return</span> &#123;...state, ...mock, <span class="attr">loading</span>: <span class="literal">false</span>&#125;;</div><div class="line">    &#125;,</div><div class="line">    createSuccess()&#123;&#125;,</div><div class="line">    deleteSuccess()&#123;&#125;,</div><div class="line">    updateSuccess()&#123;&#125;,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK,上面的代码中，我们已经将原来模拟的静态数据迁移到models的 <code>reducers</code> 里面了，但是这还不够，我们需要将数据和UI组件关联起来。下面干死它。</p>
<h2 id="关联Modal"><a href="#关联Modal" class="headerlink" title="关联Modal"></a>关联Modal</h2><p>当组件和 Model 建立了关系之后，我们还需要去调用一下 Reducers 的，就是需要在组件发起一个action。直接看代码：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">import</span> &#123; hashHistory &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">namespace</span>: <span class="string">'user'</span>,</div><div class="line">  <span class="attr">state</span>: &#123;</div><div class="line">    <span class="attr">list</span>: [],</div><div class="line">    <span class="attr">tatal</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">loading</span>: <span class="literal">false</span>,            </div><div class="line">    <span class="attr">current</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">currentItem</span>: &#123;&#125;,</div><div class="line">    <span class="attr">modalVisible</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">modalType</span>: <span class="string">'create'</span>,</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// 订阅数据</span></div><div class="line">  subscriptions: &#123;</div><div class="line">    setup(&#123; dispatch, history &#125;) &#123;</div><div class="line">      history.listen(<span class="function"><span class="params">localtion</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span>(localtion.pathname === <span class="string">'/User'</span>) &#123;</div><div class="line">          dispatch(&#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'querySuccess'</span>,</div><div class="line">            <span class="attr">payload</span>: &#123;&#125;,</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">effects</span>: &#123;</div><div class="line">    *query()&#123;&#125;,</div><div class="line">    *create()&#123;&#125;,</div><div class="line">    *<span class="string">'delete'</span>()&#123;&#125;,</div><div class="line">    *update()&#123;&#125;,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">reducers</span>: &#123;</div><div class="line">    showLoading()&#123;&#125;,</div><div class="line">    showModal()&#123;&#125;,</div><div class="line">    hideModal()&#123;&#125;,</div><div class="line">    querySuccess(state)&#123;</div><div class="line">      <span class="keyword">const</span> mock = &#123;</div><div class="line">        <span class="attr">total</span>: <span class="number">3</span>,</div><div class="line">        <span class="attr">current</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">loading</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">dataSource</span>: [</div><div class="line">          &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"木见过"</span>,</div><div class="line">            <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">            <span class="attr">address</span>: <span class="string">"滨江"</span></div><div class="line">          &#125;, &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"懂得"</span>,</div><div class="line">            <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">            <span class="attr">address</span>: <span class="string">"滨江"</span></div><div class="line">          &#125;, &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"生活"</span>,</div><div class="line">            <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">            <span class="attr">address</span>: <span class="string">"花园"</span></div><div class="line">          &#125;, &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"琪琪"</span>,</div><div class="line">            <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">            <span class="attr">address</span>: <span class="string">"北京"</span></div><div class="line">          &#125;, </div><div class="line">        ],</div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">return</span> &#123;...state, ...mock, <span class="attr">loading</span>: <span class="literal">false</span>&#125;;</div><div class="line">    &#125;,</div><div class="line">    createSuccess()&#123;&#125;,</div><div class="line">    deleteSuccess()&#123;&#125;,</div><div class="line">    updateSuccess()&#123;&#125;,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码中，我们是在一个页面初始化的时候发出 action 获取数据，然后渲染到页面中。奥，对了，还有一点需要注意一下，当你定义好了 modal 之后，千万别忘了在 <code>src/index.js</code> 引入该数据模型，然后就爽歪歪了，代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.model(<span class="built_in">require</span>(<span class="string">'./models/users'</span>));</div></pre></td></tr></table></figure>
<h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><p>写到这里，其实大部分已经写完了，所以我们需要理一下思路比较好。</p>
<blockquote>
<ol>
<li>首先我们在 <code>src/components</code> 新建文件夹 Users 用来存放所有与用户信息相关的组件，在的该文件下新建了3个 UI 组件去描述用户信息。</li>
<li>UI 组件新建好了， 接下来去路由文件夹 <code>/routes/</code> 文件夹下面，新建路由组件，并且引入之前下的3个 UI 组件。</li>
<li>路由组件写好之后，我们就可以配置路由了，OK，找到 <code>src/router.js</code> 添加该Web页面的路由，具体代码请查看本文前部分。</li>
<li>好像所有准备工作都做好了，剩下的就是核心了， <em>数据</em>， 找到 models 文件夹然后，新建数据 users.js，去处理数据。具体源码见上文。</li>
<li>这篇文章中，我们只是模拟了静态数据，实际的业务逻辑都是请求接口，是异步操作，在请求拿到数据后，怎么去更新state， 下面将会讲到。</li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css hack for IE6,7,8,9,11]]></title>
      <url>http://yoursite.com/2016/10/05/Tags/</url>
      <content type="html"><![CDATA[<p>通常在前端开发中，我们很容易遇到这样的问题，就是自己写好的页面的在Chrome浏览器里面明明是好的，但是放在IE里面样式就变了，当然这是对于新手来说的。老程序猿都知道这是IE的不兼容造成的，但是有时候也会忘记一些关于CSS样式的兼容IE写法，所以这里，顺便整理一下这些方法，与人方便，于己方便。<br><a id="more"></a></p>
<h3 id="IE-6"><a href="#IE-6" class="headerlink" title="IE 6"></a>IE 6</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> <span class="selector-class">.ie6</span> &#123;<span class="attribute">property</span>:value;&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">or</span></div><div class="line"><span class="selector-class">.ie6</span> &#123; <span class="attribute">_property</span>:value;&#125;</div></pre></td></tr></table></figure>
<h3 id="IE-7"><a href="#IE-7" class="headerlink" title="IE 7"></a>IE 7</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*+<span class="selector-tag">html</span> <span class="selector-class">.ie7</span> &#123;<span class="attribute">property</span>:value;&#125;</div><div class="line"><span class="selector-tag">or</span></div><div class="line">*<span class="selector-pseudo">:first-child+html</span> <span class="selector-class">.ie7</span> &#123;<span class="attribute">property</span>:value;&#125;</div></pre></td></tr></table></figure>
<h3 id="IE-6-and-7"><a href="#IE-6-and-7" class="headerlink" title="IE 6 and 7"></a>IE 6 and 7</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@media screen\9 &#123;</div><div class="line">    .ie67 &#123;property:value;&#125;</div><div class="line">&#125;</div><div class="line">or</div><div class="line">.ie67 &#123; *property:value;&#125;</div><div class="line"></div><div class="line">or</div><div class="line">.ie67 &#123; #property:value;&#125;</div></pre></td></tr></table></figure>
<h3 id="IE-6-7-and-8"><a href="#IE-6-7-and-8" class="headerlink" title="IE 6, 7 and 8"></a>IE 6, 7 and 8</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> \<span class="number">0s</span>creen\,screen\<span class="number">9</span> &#123;</div><div class="line">    <span class="selector-class">.ie678</span> &#123;<span class="attribute">property</span>:value;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###　IE 8<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>&gt;<span class="comment">/**/</span><span class="selector-tag">body</span> <span class="selector-class">.ie8</span> &#123;<span class="attribute">property</span>:value;&#125;</div><div class="line"><span class="selector-tag">or</span></div><div class="line">@<span class="keyword">media</span> \<span class="number">0s</span>creen &#123;</div><div class="line">    <span class="selector-class">.ie8</span> &#123;<span class="attribute">property</span>:value;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="IE-8-Standards-Mode-Only"><a href="#IE-8-Standards-Mode-Only" class="headerlink" title="IE 8 Standards Mode Only"></a>IE 8 Standards Mode Only</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.ie8 &#123; property /*\**/: value\9 &#125;</div></pre></td></tr></table></figure>
<h3 id="IE-8-9-and-10"><a href="#IE-8-9-and-10" class="headerlink" title="IE 8,9 and 10"></a>IE 8,9 and 10</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen\<span class="number">0</span> &#123;</div><div class="line">    <span class="selector-class">.ie8910</span> &#123;<span class="attribute">property</span>:value;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="IE-9-only"><a href="#IE-9-only" class="headerlink" title="IE 9 only"></a>IE 9 only</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@media screen and (min-width:0\0) and (min-resolution: .001dpcm) &#123; </div><div class="line"> // IE9 CSS</div><div class="line"> .ie9&#123;property:value;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="IE-9-and-above"><a href="#IE-9-and-above" class="headerlink" title="IE 9 and above"></a>IE 9 and above</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@media screen and (min-width:0\0) and (min-resolution: +72dpi) &#123;</div><div class="line">  // IE9+ CSS</div><div class="line">  .ie9up&#123;property:value;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="IE-9-and-10"><a href="#IE-9-and-10" class="headerlink" title="IE 9 and 10"></a>IE 9 and 10</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">0</span>\<span class="number">0</span>) &#123;</div><div class="line">    <span class="selector-class">.ie910</span>&#123;<span class="attribute">property</span>:value\<span class="number">9</span>;&#125; <span class="comment">/* backslash-9 removes ie11+ &amp; old Safari 4 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="IE-10-only"><a href="#IE-10-only" class="headerlink" title="IE 10 only"></a>IE 10 only</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_<span class="selector-pseudo">:-ms-lang(x)</span>, <span class="selector-class">.ie10</span> &#123; <span class="attribute">property</span>:value\<span class="number">9</span>; &#125;</div></pre></td></tr></table></figure>
<h3 id="IE-10-and-above"><a href="#IE-10-and-above" class="headerlink" title="IE 10 and above"></a>IE 10 and above</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">_<span class="selector-pseudo">:-ms-lang(x)</span>, <span class="selector-class">.ie10up</span> &#123; <span class="attribute">property</span>:value; &#125;</div><div class="line"></div><div class="line"><span class="selector-tag">or</span></div><div class="line">@<span class="keyword">media</span> all and (-ms-high-contrast: none), (-ms-high-contrast: active) &#123;</div><div class="line">   <span class="selector-class">.ie10up</span>&#123;<span class="attribute">property</span>:value;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="IE-11-and-above"><a href="#IE-11-and-above" class="headerlink" title="IE 11 (and above..)"></a>IE 11 (and above..)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_<span class="selector-pseudo">:-ms-fullscreen</span>, <span class="selector-pseudo">:root</span> <span class="selector-class">.ie11up</span> &#123; <span class="attribute">property</span>:value; &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[github & Hexo 搭建个性博客]]></title>
      <url>http://yoursite.com/2016/10/05/hexoInstall/</url>
      <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>想想工作了也蛮久了，很喜欢杭州的环境，所以毕业也是暂时留到杭州工作，以前写代码，有不会的地方，就要上去网查资料，看到许多人的博客，有记录生活和技术的，觉得的很酷，当时就在想，自己搞一个博客玩玩好了，但是这件事一直没有做起来，很遗憾，这次花了些时间，总算是搞好了。同时也打算把近些时候工作中遇到的技术问题给记录一下。同时，也想写写生活，废话多了一点。</p>
<h3 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a>正文部分</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>这里以windows为例，在配置博客之前，安装Hexo需要安装<code>ndoe.js</code>，所以首先你需要去网上下载并全局安装，很多博客都有写<code>node.js</code>的安装方法。可以去查一下，这里就不再赘述了，官网地址如下：</p>
<blockquote>
<p><a href="http://nodejs.cn/" target="_blank" rel="external">node.js传送门</a></p>
</blockquote>
<p>安装好之后，我们打开命令行，运行以下命令：</p>
<blockquote>
<p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a></p>
</blockquote>
<p>这段代码主要是用淘宝镜像代理包管理器<code>npm</code>,纯粹是为了在<code>ndoe</code>环境下安装模块能够快一些。大多数时候，随着项目越来越大，整个项目的依赖就变的很多了，这时候用<code>npm</code>实在是太慢了，相对来讲<code>cnpm</code>就很快。具体详情请前往<a href="http://npm.taobao.org/" target="_blank" rel="external">淘宝npm镜像代理</a>查看，<br>安装好了之后，还需要安装<code>git</code>工具，链接如下：</p>
<blockquote>
<p><a href="https://git-scm.com/download" target="_blank" rel="external">git传送门</a></p>
</blockquote>
<p>初此之外我们还需要在<em>github</em>上面注册一个账户，作为一个程序员，没有一个github账号就显的太low了，所以去注册一个吧！程序员的facebook,你值得拥有。<br>好了废话不多说了，到此我们的准备工作差不多完了。</p>
<h4 id="出门迎战"><a href="#出门迎战" class="headerlink" title="出门迎战"></a>出门迎战</h4><ol>
<li><p>打开命令行运行依次运行以下命令：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cnpm install hexo -g</div><div class="line">D:</div><div class="line">mkdir myblog</div><div class="line"><span class="built_in">cd</span> myblog</div><div class="line">hexo init</div><div class="line">cnpm install</div><div class="line">npm server</div></pre></td></tr></table></figure>
</li>
<li><p>从控制台我们就可发现，该服务器监听的端口是4000， 那么我们打开浏览器输入<code>http://localhost:4000</code> 查看，就会发现一个完整简洁的博客就已经出现了，是不是很方便，下面我们开始配置这个博客，并将部署到我们之前创建的<em>github</em>上面，就可以开始写作生涯了。</p>
</li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
